/**
 * Angular application
 * @see http://google-styleguide.googlecode.com/svn/trunk/angularjs-google-style.html
 * @type {*}
 */
application = angular.module('application',
    ['ngAnimate', 'ngRoute', 'route-segment', 'view-segment', 'ui.bootstrap']);

/**
 * Use alternative braces for angular application because the Django has a same braces
 */
application.config(function ($interpolateProvider, $controllerProvider) {
    $interpolateProvider.startSymbol('{[{');
    $interpolateProvider.endSymbol('}]}');
    $controllerProvider.allowGlobals();
});

/**
 * @see https://app.pusher.com
 * @type {{use: use}}
 */
application.pusher = {
    /**
     * Go pusher within global API
     */
    use: function () {
        /**
         * Trying to connect to the pusher
         */
        try {
            /**
             * @type {string}
             */
            PUSHER_KEY;

            /**
             * @type {Pusher}
             */
            application.pusher = PUSHER_KEY ? new Pusher(PUSHER_KEY) : false;
            application.pusher.use = function () {
            }
        }
        catch (e) {
            /**
             * @type {Pusher}
             */
            application.pusher = false;
        }

        if (!application.pusher) {
            throw 'The Pusher does not connected'
        }
    }
};

/**
 * localStorage helper
 * @type {{currentDBName: string, get: Function, set: Function}}
 * @export
 */
application.localStorage = {
    /**
     * Unique value for your project
     */
    currentDBName: 'angular_fsgh90rghsfhudsnv',

    /**
     *
     * @param {string} key
     * @param {boolean} fromJSON
     * @returns {*}
     */
    get: function (key, fromJSON) {
        var r = window.localStorage.getItem(
            this.currentDBName + '-' + key
        );
        return (typeof r == 'undefined') ?
            false : (fromJSON ? JSON.parse(r) : r);
    },

    /**
     *
     * @param {string} key
     * @param {*} value
     * @param {boolean} toJSON
     */
    set: function (key, value, toJSON) {
        value = toJSON ? JSON.stringify(value) : value;
        window.localStorage.setItem(
            this.currentDBName + '-' + key, value
        )
    }
};

/**
 * Moment.js
 * @type {*}
 * @export
 */
moment;
application.moment = moment;
application.moment.lang('ru');

/**
 * Server API Helper
 * @type {{errorCallback: errorCallback, successCallback: successCallback}}
 * @export
 */
application.server = {
    /**
     * Default error callback
     * @param {object} response
     * @param {number} status
     */
    errorCallback: function (response, status) {
        response = response || {
            error: 'Server Error'
        };
        if (application.showAlert) {
            var errors = {
                400: ['Bad Request', 'Во время выполнения запроса возникла ошибка, ' +
                    'проверьте данные ещё раз и исправьте при необходимости.'],
                403: ['Forbidden', 'Данное действие для вас запрещено.'],
                404: ['Not Found', 'Не удалось найти запрашиваемый элемент.'],
                409: ['Conflict', 'Во время выполнения запроса возникла ошибка конфликта данных.'],
                412: ['Precondition Failed', 'Неверный запрос, измените его и попробуйте снова.'],
                423: ['Locked', 'Ресурс из запроса заблокирован от применения к нему указанного метода.'],
                429: ['Too Many Requests', 'Очень много запросов, попробуйте позже.'],
                449: ['Retry With', 'Поступило недостаточно информации.'],
                500: ['Server Error', 'Ошибка сервера.']
            };
            application.showAlert('Ошибка', (errors[status][0] == response.error ?
                errors[status][1] : response.error))
        } else {
            console.error(response, status)
        }
    },

    /**
     * Default success callback
     * @param {object} response
     */
    successCallback: function (response) {
        console.info(response)
    }
};

/**
 * Moment.js factory
 * @module
 */
application.factory('$moment', [function () {
    return application.moment
}]);

/**
 * Common modal factory
 * @module
 */
application.factory('$modal2', [function () {
    return application.modalService
}]);

/**
 * API factory
 * @module
 */
application.factory('$api', ['$http', function (httpRequest) {
    return {
        /**
         * POST Api Request
         * Special for Django
         * You can pass successCallback only instead kwargs
         *
         * @param {string} method
         * @param {object|function} kwargs
         * @param {function} successCallback
         * @param {function} errorCallback
         * @export
         */
        call: function (method, kwargs, successCallback, errorCallback) {
            if (!method) {
                throw 'You want to select a method'
            }

            /**
             * Different kinds of call:
             * post('example', kwargs, success, error)
             * post('example', success, error)
             * post('example', success)
             */
            if (typeof kwargs == 'function' && typeof successCallback == 'function' && !errorCallback) {
                errorCallback = successCallback;
                successCallback = kwargs;
                kwargs = {};
            } else if (typeof kwargs == 'function' && !successCallback) {
                successCallback = kwargs;
                kwargs = {};
            }

            successCallback = successCallback || application.server.successCallback;
            errorCallback = errorCallback || application.server.errorCallback;
            kwargs = kwargs || {};
            kwargs['function'] = method;

            /**
             * @see https://docs.angularjs.org/api/ng/service/$http
             */
            var request = httpRequest({
                method: 'POST',
                url: '/api/',
                data: kwargs,
                cache: false,
                timeout: 10e3,
                responseType: 'json',
                xsrfHeaderName: 'X-CSRFToken',
                xsrfCookieName: 'csrftoken'
            });

            request.success(successCallback);
            request.error(errorCallback);
        }
    }
}]);
/**
 * ng-enter support
 */
application.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter, {'event': event});
                });

                event.preventDefault();
            }
        });
    };
});

/**
 * focus support
 */
application.directive('ngFocus', function ($timeout) {
    return {
        scope: { trigger: '@ngFocus' },
        /**
         *
         * @param scope
         * @param element
         */
        link: function (scope, element) {
            scope.$watch('trigger', function (value) {
                if (value === "true") {
                    $timeout(function () {
                        element[0].focus();
                    });
                }
            });
        }
    };
});

/**
 * ng-delay daemon
 */
application.directive('ngDelay', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
        scope: true,
        /**
         * @param element
         * @param attributes
         * @returns {undefined | {post: post}}
         */
        compile: function (element, attributes) {
            var expression = attributes['ngChange'];
            if (!expression)
                return;

            var ngModel = attributes['ngModel'];
            if (ngModel) attributes['ngModel'] = '$parent.' + ngModel;
            attributes['ngChange'] = '$$delay.execute()';

            return {
                post: function (scope, element, attributes) {
                    scope.$$delay = {
                        expression: expression,
                        delay: scope.$eval(attributes['ngDelay']),
                        execute: function () {
                            var state = scope.$$delay;
                            state.then = Date.now();
                            $timeout(function () {
                                if (Date.now() - state.then >= state.delay)
                                    scope.$parent.$eval(expression);
                            }, state.delay);
                        }
                    };
                }
            }
        }
    };
}]);
/**
 * Beautify datetime, make it localized
 * @param {string} datetime
 * @returns {string}
 */
application.filter('getRelativeDateTime', function() {
	return function (datetime) {
    	return application.moment(datetime).fromNow();
    }
});

/**
 * Display datetime in special format
 * D MMMM YYYY, dddd, HH:mm:ss
 * @param {string} datetime
 * @returns {string}
 */
 application.filter('getAbsoluteDateTime', function() {
	return function (datetime) {
    	return application.moment(datetime).format('D MMMM YYYY, dddd, HH:mm:ss');
    }
});
/**
 * Another controller.
 *
 * @constructor
 * @ngInject
 * @export
 */
application.controller('AnotherCtrl', [function() {
    this.myColor = 'yellow';
}]);

application.controller('SecondCtrl', [function() {
    this.myColor = 'green';
}]);
/**
 * Home controller.
 *
 * @constructor
 * @ngInject
 * @export
 */
application.controller('HomeCtrl', ['$api', function(api) {
    this.myColor = 'soft-blue';
    this.getObamaYears = function () {
        var homeCtrl = this;
        api.call('get_obama_years', function(response) {
            homeCtrl.obamaYears = response.result;
        });
    };
}]);
/**
 * Main controller.
 *
 * @constructor
 * @ngInject
 * @export
 */
application.MainCtrl = function($scope, $modal, $routeSegment, $location, loader) {
    /**
     * Hide pre loader
     */
    jQuery('#loader').hide();

    $scope.$routeSegment = $routeSegment;
    $scope.loader = loader;

    /**
     * Modal component
     * @typedef {object}
     */
    application.modalService = $modal;

    $scope.$on('routeSegmentChange', function () {
        loader.show = false;
    });
};

/**
 *
 * @param $scope
 * @param $modalInstance
 * @param {string} title
 * @param {string} message
 * @constructor
 */
application.MainCtrl.prototype.ModalAlertInstanceCtrl = function ($scope, $modalInstance, title, message) {
    $scope.alertTitle = title;
    $scope.alertMessage = message;
    $scope.alertClose = function () {
        $modalInstance.close();
    };
};

/**
 * Show alert
 * @param {string} title
 * @param {string} message
 * @constructor
 * @ngInject
 * @export
 */
application.MainCtrl.prototype.showAlert = function (title, message) {
    if (!message && title) {
        message = title;
        title = 'Всплывающее сообщение';
    }
    application.modalService.open({
        templateUrl: 'modalAlert.html',
        controller: application.MainCtrl.prototype.ModalAlertInstanceCtrl,
        resolve: {
            title: function() {
                return title
            },
            message: function () {
                return message
            }
        }
    });
};

/**
 * Make some functions as global
 */
application.showAlert = application.MainCtrl.prototype.showAlert;
/**
 * Test controller.
 *
 * @constructor
 * @ngInject
 * @export
 */
application.controller('Test', ['$api', function(api) {
    // do nothing
}]);

application.config(function ($routeSegmentProvider, $routeProvider, $locationProvider) {

// Configuring provider options

    $routeSegmentProvider.options.autoLoadTemplates = true;

// Setting routes. This consists of two parts:
// 1. `when` is similar to vanilla $route `when` but takes segment name instead of params hash
// 2. traversing through segment tree to set it up

    $routeSegmentProvider

        .when('/', 'home')
        .when('/another/', 'another')
        .when('/another/second_level/', 'another.second_level')

        .segment('home', {
            templateUrl: '/static/angular_templates/home.html',
            controller: this.MainCtrl
        })

        .segment('another', {
            templateUrl: '/static/angular_templates/another.html',
            controller: this.AnotherCtrl
        })

        .within()

            .segment('second_level', {
                templateUrl: '/static/angular_templates/another_second_level.html',
                controller: this.SecondCtrl
            })

        .up()
    ;

    /**
     * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     * DO NOT REMOVE LAST .up() with ;
     * FOR THE GULP TASK MANAGER AUTOMATIC
     * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     */

    $routeProvider.otherwise({redirectTo: '/'});
    $locationProvider.html5Mode(true);
});

application.value('loader', {show: false});